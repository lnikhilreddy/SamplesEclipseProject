/*
 *  Copyright 2015 Adobe Systems Incorporated
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.nikhil.SampleCode.core.servlets;

import org.apache.felix.scr.annotations.Property;
import org.apache.felix.scr.annotations.Service;
import org.apache.felix.scr.annotations.Activate;
import org.apache.felix.scr.annotations.Component;
import org.apache.felix.scr.annotations.Properties;
import org.apache.felix.scr.annotations.sling.SlingServlet;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.servlets.SlingAllMethodsServlet;
import org.apache.sling.api.servlets.SlingSafeMethodsServlet;
import org.apache.sling.commons.osgi.PropertiesUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.ServletException;
import java.io.IOException;
import java.util.Map;

/**
 * Servlet that writes some sample content into the response. It is mounted for
 * all resources of a specific Sling resource type. The
 * {@link SlingSafeMethodsServlet} shall be used for HTTP methods that are
 * idempotent. For write operations use the {@link SlingAllMethodsServlet}.
 */
@SuppressWarnings("serial")

@SlingServlet(
    paths={"/services/unicom/v1"}, 
    extensions = {"html"},
    metatype	= true
)
@Properties({
	@Property(name="service.pid", value="org.nikhil.ServletWithOsgiConfig", propertyPrivate=false),
    @Property(name="service.description",value="Simple Servlet calling path /services/unicom/v1", propertyPrivate=false),
    @Property(name="service.vendor",value="Nikhil @ Adobe", propertyPrivate=false)
})

public class ServletWithOsgiConfig extends SlingSafeMethodsServlet {
	
	private Logger log = LoggerFactory.getLogger(getClass());
	
	private String value1;
	
	@Activate
	protected void activate(final Map<String, Object> config) {
		//Read single value
		this.value1 = PropertiesUtil.toString(config.get("service.description"),"default value is");
		     
		/*Read multivaluessss
		this.value2=PropertiesUtil.toStringArray(config.get(VALUE2));
		  this.value3=PropertiesUtil.toStringArray(config.get(VALUE3));
		*/
	}

    @Override
    protected void doGet(final SlingHttpServletRequest req,
            final SlingHttpServletResponse resp) throws ServletException, IOException {
        final Resource resource = req.getResource();
        //resp.getOutputStream().println(resource.toString());
        resp.getOutputStream().println(
                "This content is generated by the SimpleServlet" 
                + "\n" + this.value1 + " is value from properties of the OSGI Config Manager" );
    }
}
